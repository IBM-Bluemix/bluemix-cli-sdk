// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/IBM-Bluemix/bluemix-cli-sdk/bluemix/authentication"
	"github.com/IBM-Bluemix/bluemix-cli-sdk/bluemix/configuration/core_config"
)

type FakeIAMAuthRepository struct {
	AuthenticatePasswordStub        func(username string, password string) error
	authenticatePasswordMutex       sync.RWMutex
	authenticatePasswordArgsForCall []struct {
		username string
		password string
	}
	authenticatePasswordReturns struct {
		result1 error
	}
	AuthenticateAPIKeyStub        func(apiKey string) error
	authenticateAPIKeyMutex       sync.RWMutex
	authenticateAPIKeyArgsForCall []struct {
		apiKey string
	}
	authenticateAPIKeyReturns struct {
		result1 error
	}
	RefreshTokenStub        func() (string, error)
	refreshTokenMutex       sync.RWMutex
	refreshTokenArgsForCall []struct{}
	refreshTokenReturns struct {
		result1 string
		result2 error
	}
	RefreshTokenWithUpdatedAccountsStub        func(core_config.AccountsInfo) (string, error)
	refreshTokenWithUpdatedAccountsMutex       sync.RWMutex
	refreshTokenWithUpdatedAccountsArgsForCall []struct {
		arg1 core_config.AccountsInfo
	}
	refreshTokenWithUpdatedAccountsReturns struct {
		result1 string
		result2 error
	}
}

func (fake *FakeIAMAuthRepository) AuthenticatePassword(username string, password string) error {
	fake.authenticatePasswordMutex.Lock()
	fake.authenticatePasswordArgsForCall = append(fake.authenticatePasswordArgsForCall, struct {
		username string
		password string
	}{username, password})
	fake.authenticatePasswordMutex.Unlock()
	if fake.AuthenticatePasswordStub != nil {
		return fake.AuthenticatePasswordStub(username, password)
	} else {
		return fake.authenticatePasswordReturns.result1
	}
}

func (fake *FakeIAMAuthRepository) AuthenticatePasswordCallCount() int {
	fake.authenticatePasswordMutex.RLock()
	defer fake.authenticatePasswordMutex.RUnlock()
	return len(fake.authenticatePasswordArgsForCall)
}

func (fake *FakeIAMAuthRepository) AuthenticatePasswordArgsForCall(i int) (string, string) {
	fake.authenticatePasswordMutex.RLock()
	defer fake.authenticatePasswordMutex.RUnlock()
	return fake.authenticatePasswordArgsForCall[i].username, fake.authenticatePasswordArgsForCall[i].password
}

func (fake *FakeIAMAuthRepository) AuthenticatePasswordReturns(result1 error) {
	fake.AuthenticatePasswordStub = nil
	fake.authenticatePasswordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAuthRepository) AuthenticateAPIKey(apiKey string) error {
	fake.authenticateAPIKeyMutex.Lock()
	fake.authenticateAPIKeyArgsForCall = append(fake.authenticateAPIKeyArgsForCall, struct {
		apiKey string
	}{apiKey})
	fake.authenticateAPIKeyMutex.Unlock()
	if fake.AuthenticateAPIKeyStub != nil {
		return fake.AuthenticateAPIKeyStub(apiKey)
	} else {
		return fake.authenticateAPIKeyReturns.result1
	}
}

func (fake *FakeIAMAuthRepository) AuthenticateAPIKeyCallCount() int {
	fake.authenticateAPIKeyMutex.RLock()
	defer fake.authenticateAPIKeyMutex.RUnlock()
	return len(fake.authenticateAPIKeyArgsForCall)
}

func (fake *FakeIAMAuthRepository) AuthenticateAPIKeyArgsForCall(i int) string {
	fake.authenticateAPIKeyMutex.RLock()
	defer fake.authenticateAPIKeyMutex.RUnlock()
	return fake.authenticateAPIKeyArgsForCall[i].apiKey
}

func (fake *FakeIAMAuthRepository) AuthenticateAPIKeyReturns(result1 error) {
	fake.AuthenticateAPIKeyStub = nil
	fake.authenticateAPIKeyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIAMAuthRepository) RefreshToken() (string, error) {
	fake.refreshTokenMutex.Lock()
	fake.refreshTokenArgsForCall = append(fake.refreshTokenArgsForCall, struct{}{})
	fake.refreshTokenMutex.Unlock()
	if fake.RefreshTokenStub != nil {
		return fake.RefreshTokenStub()
	} else {
		return fake.refreshTokenReturns.result1, fake.refreshTokenReturns.result2
	}
}

func (fake *FakeIAMAuthRepository) RefreshTokenCallCount() int {
	fake.refreshTokenMutex.RLock()
	defer fake.refreshTokenMutex.RUnlock()
	return len(fake.refreshTokenArgsForCall)
}

func (fake *FakeIAMAuthRepository) RefreshTokenReturns(result1 string, result2 error) {
	fake.RefreshTokenStub = nil
	fake.refreshTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeIAMAuthRepository) RefreshTokenWithUpdatedAccounts(arg1 core_config.AccountsInfo) (string, error) {
	fake.refreshTokenWithUpdatedAccountsMutex.Lock()
	fake.refreshTokenWithUpdatedAccountsArgsForCall = append(fake.refreshTokenWithUpdatedAccountsArgsForCall, struct {
		arg1 core_config.AccountsInfo
	}{arg1})
	fake.refreshTokenWithUpdatedAccountsMutex.Unlock()
	if fake.RefreshTokenWithUpdatedAccountsStub != nil {
		return fake.RefreshTokenWithUpdatedAccountsStub(arg1)
	} else {
		return fake.refreshTokenWithUpdatedAccountsReturns.result1, fake.refreshTokenWithUpdatedAccountsReturns.result2
	}
}

func (fake *FakeIAMAuthRepository) RefreshTokenWithUpdatedAccountsCallCount() int {
	fake.refreshTokenWithUpdatedAccountsMutex.RLock()
	defer fake.refreshTokenWithUpdatedAccountsMutex.RUnlock()
	return len(fake.refreshTokenWithUpdatedAccountsArgsForCall)
}

func (fake *FakeIAMAuthRepository) RefreshTokenWithUpdatedAccountsArgsForCall(i int) core_config.AccountsInfo {
	fake.refreshTokenWithUpdatedAccountsMutex.RLock()
	defer fake.refreshTokenWithUpdatedAccountsMutex.RUnlock()
	return fake.refreshTokenWithUpdatedAccountsArgsForCall[i].arg1
}

func (fake *FakeIAMAuthRepository) RefreshTokenWithUpdatedAccountsReturns(result1 string, result2 error) {
	fake.RefreshTokenWithUpdatedAccountsStub = nil
	fake.refreshTokenWithUpdatedAccountsReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

var _ authentication.IAMAuthRepository = new(FakeIAMAuthRepository)
