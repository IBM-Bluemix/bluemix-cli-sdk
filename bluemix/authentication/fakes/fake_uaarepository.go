// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/IBM-Bluemix/bluemix-cli-sdk/bluemix/authentication"
)

type FakeUAARepository struct {
	AuthenticatePasswordStub        func(username string, password string) error
	authenticatePasswordMutex       sync.RWMutex
	authenticatePasswordArgsForCall []struct {
		username string
		password string
	}
	authenticatePasswordReturns struct {
		result1 error
	}
	AuthenticateSSOStub        func(passcode string) error
	authenticateSSOMutex       sync.RWMutex
	authenticateSSOArgsForCall []struct {
		passcode string
	}
	authenticateSSOReturns struct {
		result1 error
	}
	AuthenticateAPIKeyStub        func(apiKey string) error
	authenticateAPIKeyMutex       sync.RWMutex
	authenticateAPIKeyArgsForCall []struct {
		apiKey string
	}
	authenticateAPIKeyReturns struct {
		result1 error
	}
	RefreshTokenStub        func() (string, error)
	refreshTokenMutex       sync.RWMutex
	refreshTokenArgsForCall []struct{}
	refreshTokenReturns struct {
		result1 string
		result2 error
	}
}

func (fake *FakeUAARepository) AuthenticatePassword(username string, password string) error {
	fake.authenticatePasswordMutex.Lock()
	fake.authenticatePasswordArgsForCall = append(fake.authenticatePasswordArgsForCall, struct {
		username string
		password string
	}{username, password})
	fake.authenticatePasswordMutex.Unlock()
	if fake.AuthenticatePasswordStub != nil {
		return fake.AuthenticatePasswordStub(username, password)
	} else {
		return fake.authenticatePasswordReturns.result1
	}
}

func (fake *FakeUAARepository) AuthenticatePasswordCallCount() int {
	fake.authenticatePasswordMutex.RLock()
	defer fake.authenticatePasswordMutex.RUnlock()
	return len(fake.authenticatePasswordArgsForCall)
}

func (fake *FakeUAARepository) AuthenticatePasswordArgsForCall(i int) (string, string) {
	fake.authenticatePasswordMutex.RLock()
	defer fake.authenticatePasswordMutex.RUnlock()
	return fake.authenticatePasswordArgsForCall[i].username, fake.authenticatePasswordArgsForCall[i].password
}

func (fake *FakeUAARepository) AuthenticatePasswordReturns(result1 error) {
	fake.AuthenticatePasswordStub = nil
	fake.authenticatePasswordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUAARepository) AuthenticateSSO(passcode string) error {
	fake.authenticateSSOMutex.Lock()
	fake.authenticateSSOArgsForCall = append(fake.authenticateSSOArgsForCall, struct {
		passcode string
	}{passcode})
	fake.authenticateSSOMutex.Unlock()
	if fake.AuthenticateSSOStub != nil {
		return fake.AuthenticateSSOStub(passcode)
	} else {
		return fake.authenticateSSOReturns.result1
	}
}

func (fake *FakeUAARepository) AuthenticateSSOCallCount() int {
	fake.authenticateSSOMutex.RLock()
	defer fake.authenticateSSOMutex.RUnlock()
	return len(fake.authenticateSSOArgsForCall)
}

func (fake *FakeUAARepository) AuthenticateSSOArgsForCall(i int) string {
	fake.authenticateSSOMutex.RLock()
	defer fake.authenticateSSOMutex.RUnlock()
	return fake.authenticateSSOArgsForCall[i].passcode
}

func (fake *FakeUAARepository) AuthenticateSSOReturns(result1 error) {
	fake.AuthenticateSSOStub = nil
	fake.authenticateSSOReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUAARepository) AuthenticateAPIKey(apiKey string) error {
	fake.authenticateAPIKeyMutex.Lock()
	fake.authenticateAPIKeyArgsForCall = append(fake.authenticateAPIKeyArgsForCall, struct {
		apiKey string
	}{apiKey})
	fake.authenticateAPIKeyMutex.Unlock()
	if fake.AuthenticateAPIKeyStub != nil {
		return fake.AuthenticateAPIKeyStub(apiKey)
	} else {
		return fake.authenticateAPIKeyReturns.result1
	}
}

func (fake *FakeUAARepository) AuthenticateAPIKeyCallCount() int {
	fake.authenticateAPIKeyMutex.RLock()
	defer fake.authenticateAPIKeyMutex.RUnlock()
	return len(fake.authenticateAPIKeyArgsForCall)
}

func (fake *FakeUAARepository) AuthenticateAPIKeyArgsForCall(i int) string {
	fake.authenticateAPIKeyMutex.RLock()
	defer fake.authenticateAPIKeyMutex.RUnlock()
	return fake.authenticateAPIKeyArgsForCall[i].apiKey
}

func (fake *FakeUAARepository) AuthenticateAPIKeyReturns(result1 error) {
	fake.AuthenticateAPIKeyStub = nil
	fake.authenticateAPIKeyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUAARepository) RefreshToken() (string, error) {
	fake.refreshTokenMutex.Lock()
	fake.refreshTokenArgsForCall = append(fake.refreshTokenArgsForCall, struct{}{})
	fake.refreshTokenMutex.Unlock()
	if fake.RefreshTokenStub != nil {
		return fake.RefreshTokenStub()
	} else {
		return fake.refreshTokenReturns.result1, fake.refreshTokenReturns.result2
	}
}

func (fake *FakeUAARepository) RefreshTokenCallCount() int {
	fake.refreshTokenMutex.RLock()
	defer fake.refreshTokenMutex.RUnlock()
	return len(fake.refreshTokenArgsForCall)
}

func (fake *FakeUAARepository) RefreshTokenReturns(result1 string, result2 error) {
	fake.RefreshTokenStub = nil
	fake.refreshTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

var _ authentication.UAARepository = new(FakeUAARepository)
