// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/IBM-Bluemix/bluemix-cli-sdk/plugin_examples/list_plugin/api"
	"github.com/IBM-Bluemix/bluemix-cli-sdk/plugin_examples/list_plugin/models"
)

type FakeCCClient struct {
	AppsAndServicesStub        func(spaceId string) (models.AppsAndServices, error)
	appsAndServicesMutex       sync.RWMutex
	appsAndServicesArgsForCall []struct {
		spaceId string
	}
	appsAndServicesReturns struct {
		result1 models.AppsAndServices
		result2 error
	}
	OrgUsageStub        func(orgId string) (models.OrgUsage, error)
	orgUsageMutex       sync.RWMutex
	orgUsageArgsForCall []struct {
		orgId string
	}
	orgUsageReturns struct {
		result1 models.OrgUsage
		result2 error
	}
}

func (fake *FakeCCClient) AppsAndServices(spaceId string) (models.AppsAndServices, error) {
	fake.appsAndServicesMutex.Lock()
	fake.appsAndServicesArgsForCall = append(fake.appsAndServicesArgsForCall, struct {
		spaceId string
	}{spaceId})
	fake.appsAndServicesMutex.Unlock()
	if fake.AppsAndServicesStub != nil {
		return fake.AppsAndServicesStub(spaceId)
	} else {
		return fake.appsAndServicesReturns.result1, fake.appsAndServicesReturns.result2
	}
}

func (fake *FakeCCClient) AppsAndServicesCallCount() int {
	fake.appsAndServicesMutex.RLock()
	defer fake.appsAndServicesMutex.RUnlock()
	return len(fake.appsAndServicesArgsForCall)
}

func (fake *FakeCCClient) AppsAndServicesArgsForCall(i int) string {
	fake.appsAndServicesMutex.RLock()
	defer fake.appsAndServicesMutex.RUnlock()
	return fake.appsAndServicesArgsForCall[i].spaceId
}

func (fake *FakeCCClient) AppsAndServicesReturns(result1 models.AppsAndServices, result2 error) {
	fake.AppsAndServicesStub = nil
	fake.appsAndServicesReturns = struct {
		result1 models.AppsAndServices
		result2 error
	}{result1, result2}
}

func (fake *FakeCCClient) OrgUsage(orgId string) (models.OrgUsage, error) {
	fake.orgUsageMutex.Lock()
	fake.orgUsageArgsForCall = append(fake.orgUsageArgsForCall, struct {
		orgId string
	}{orgId})
	fake.orgUsageMutex.Unlock()
	if fake.OrgUsageStub != nil {
		return fake.OrgUsageStub(orgId)
	} else {
		return fake.orgUsageReturns.result1, fake.orgUsageReturns.result2
	}
}

func (fake *FakeCCClient) OrgUsageCallCount() int {
	fake.orgUsageMutex.RLock()
	defer fake.orgUsageMutex.RUnlock()
	return len(fake.orgUsageArgsForCall)
}

func (fake *FakeCCClient) OrgUsageArgsForCall(i int) string {
	fake.orgUsageMutex.RLock()
	defer fake.orgUsageMutex.RUnlock()
	return fake.orgUsageArgsForCall[i].orgId
}

func (fake *FakeCCClient) OrgUsageReturns(result1 models.OrgUsage, result2 error) {
	fake.OrgUsageStub = nil
	fake.orgUsageReturns = struct {
		result1 models.OrgUsage
		result2 error
	}{result1, result2}
}

var _ api.CCClient = new(FakeCCClient)
