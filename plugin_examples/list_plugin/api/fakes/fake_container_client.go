// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/IBM-Cloud/ibm-cloud-cli-sdk/plugin_examples/list_plugin/api"
	"github.com/IBM-Cloud/ibm-cloud-cli-sdk/plugin_examples/list_plugin/models"
)

type FakeContainerClient struct {
	ContainersStub        func(spaceId string) ([]models.Container, error)
	containersMutex       sync.RWMutex
	containersArgsForCall []struct {
		spaceId string
	}
	containersReturns struct {
		result1 []models.Container
		result2 error
	}
	ContainersQuotaAndUsageStub        func(spaceId string) (models.ContainersQuotaAndUsage, error)
	containersQuotaAndUsageMutex       sync.RWMutex
	containersQuotaAndUsageArgsForCall []struct {
		spaceId string
	}
	containersQuotaAndUsageReturns struct {
		result1 models.ContainersQuotaAndUsage
		result2 error
	}
}

func (fake *FakeContainerClient) Containers(spaceId string) ([]models.Container, error) {
	fake.containersMutex.Lock()
	fake.containersArgsForCall = append(fake.containersArgsForCall, struct {
		spaceId string
	}{spaceId})
	fake.containersMutex.Unlock()
	if fake.ContainersStub != nil {
		return fake.ContainersStub(spaceId)
	} else {
		return fake.containersReturns.result1, fake.containersReturns.result2
	}
}

func (fake *FakeContainerClient) ContainersCallCount() int {
	fake.containersMutex.RLock()
	defer fake.containersMutex.RUnlock()
	return len(fake.containersArgsForCall)
}

func (fake *FakeContainerClient) ContainersArgsForCall(i int) string {
	fake.containersMutex.RLock()
	defer fake.containersMutex.RUnlock()
	return fake.containersArgsForCall[i].spaceId
}

func (fake *FakeContainerClient) ContainersReturns(result1 []models.Container, result2 error) {
	fake.ContainersStub = nil
	fake.containersReturns = struct {
		result1 []models.Container
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerClient) ContainersQuotaAndUsage(spaceId string) (models.ContainersQuotaAndUsage, error) {
	fake.containersQuotaAndUsageMutex.Lock()
	fake.containersQuotaAndUsageArgsForCall = append(fake.containersQuotaAndUsageArgsForCall, struct {
		spaceId string
	}{spaceId})
	fake.containersQuotaAndUsageMutex.Unlock()
	if fake.ContainersQuotaAndUsageStub != nil {
		return fake.ContainersQuotaAndUsageStub(spaceId)
	} else {
		return fake.containersQuotaAndUsageReturns.result1, fake.containersQuotaAndUsageReturns.result2
	}
}

func (fake *FakeContainerClient) ContainersQuotaAndUsageCallCount() int {
	fake.containersQuotaAndUsageMutex.RLock()
	defer fake.containersQuotaAndUsageMutex.RUnlock()
	return len(fake.containersQuotaAndUsageArgsForCall)
}

func (fake *FakeContainerClient) ContainersQuotaAndUsageArgsForCall(i int) string {
	fake.containersQuotaAndUsageMutex.RLock()
	defer fake.containersQuotaAndUsageMutex.RUnlock()
	return fake.containersQuotaAndUsageArgsForCall[i].spaceId
}

func (fake *FakeContainerClient) ContainersQuotaAndUsageReturns(result1 models.ContainersQuotaAndUsage, result2 error) {
	fake.ContainersQuotaAndUsageStub = nil
	fake.containersQuotaAndUsageReturns = struct {
		result1 models.ContainersQuotaAndUsage
		result2 error
	}{result1, result2}
}

var _ api.ContainerClient = new(FakeContainerClient)
